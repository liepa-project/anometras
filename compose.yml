services:



  anometras:
    container_name: anometras
    build:
      context: .
    env_file:
      - .env
    ports:
      - "8002:8000"    
    depends_on:
      pg_anometras:
        condition: service_healthy
        restart: true
    networks:
      - anometras_net




  pg_anometras:
    container_name: pg_anometras
    image: pgvector/pgvector:pg17 
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/pgvector/data:/var/lib/postgresql/data
      - ./provisioning/init_pgvector.sql:/docker-entrypoint-initdb.d/init_pgvector.sql
    environment:
      POSTGRES_USER: ${ANNOT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ANNOT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ANNOT_POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - anometras_net


  pg_grafana:
    container_name: pg_grafana
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: ${GF_DATABASE_NAME}
      POSTGRES_USER: ${GF_DATABASE_USER}
      POSTGRES_PASSWORD: ${GF_DATABASE_PASSWORD}
    ports:
      - "5499:5432"
    volumes:
      - ./volumes/pg_grafana:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GF_DATABASE_USER} -d ${GF_DATABASE_NAME}"]
      start_period: 0s
      interval: 5s
      timeout: 5s
      retries: 5

    networks:
      - anometras_net

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    user: "0:0"
    env_file: .env
    environment:
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: ${GF_DATABASE_HOST}
      GF_DATABASE_NAME: ${GF_DATABASE_NAME}
      GF_DATABASE_USER: ${GF_DATABASE_USER}
      GF_DATABASE_PASSWORD: ${GF_DATABASE_PASSWORD}
      GF_DATABASE_SSL_MODE: disable
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD} 
    restart: unless-stopped
    depends_on:
        - pg_grafana
    ports:
      - 3111:3000
    volumes:
      - ./volumes/grafana_data:/var/lib/grafana
      # - ./provisioning/grafana/custom.ini:/etc/grafana/grafana.ini
      - ./provisioning/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - anometras_net


networks:
  anometras_net:
    # Specify driver options
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"