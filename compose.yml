services:



  api_service:
    container_name: api_service
    build:
      context: ./
      dockerfile: ./app/api_service/Dockerfile
    env_file:
      - .env
    ports:
      - "8002:8000"     
    depends_on:
      pg_anometras:
        condition: service_healthy
        restart: true
    networks:
      - anometras_net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 500M

    

  elan_postprocessor:
    container_name: elan_postprocessor
    restart: no
    build: 
      context: ./
      dockerfile: ./app/elan_postprocessor/Dockerfile
    volumes:
      - $ANNOT_1_LOCAL_RECORDS_PATH:/records/annot1/
      - $ANNOT_ORG_LOCAL_RECORDS_PATH:/records/org/
    env_file:
      - .env
    depends_on:
      redis_anometras:
        condition: service_started
      pg_anometras:
        condition: service_healthy
        restart: true

    networks:
      - anometras_net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M

  # influxdb_anometras:
  #   image: influxdb:2.0.7
  #   container_name: influxdb_anometras
  #   environment:
  #       DOCKER_INFLUXDB_INIT_MODE: setup
  #       DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
  #       DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
  #       DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
  #       DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
  #       DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
  #       DOCKER_INFLUXDB_INIT_CLI_CONFIG_NAME: configname2
  #   volumes:
  #     - ./volumes/influxdb_data:/var/lib/influxdb2
  #   env_file:
  #     - .env
  #   ports:
  #   - "8086:8086"
  #   networks:
  #   - anometras_net
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.25'
  #         memory: 500M


  redis_anometras:
    image: redis:7
    container_name: redis_anometras
    ports:
      - 6379:6379
    networks:
      - anometras_net
    volumes:
        - ./volumes/redis/data:/data
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 100M



  pg_anometras:
    container_name: pg_anometras
    image: pgvector/pgvector:pg17 
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/pg_anometras/data:/var/lib/postgresql/data
      - ./provisioning/init_pgvector.sql:/docker-entrypoint-initdb.d/init_pgvector.sql
    environment:
      POSTGRES_USER: ${ANNOT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ANNOT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ANNOT_POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - anometras_net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 500M

  pg_grafana:
    container_name: pg_grafana
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: ${GF_DATABASE_NAME}
      POSTGRES_USER: ${GF_DATABASE_USER}
      POSTGRES_PASSWORD: ${GF_DATABASE_PASSWORD}
    ports:
      - "5499:5432"
    volumes:
      - ./volumes/pg_grafana:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GF_DATABASE_USER} -d ${GF_DATABASE_NAME}"]
      start_period: 0s
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - anometras_net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 500M

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    user: "0:0"
    env_file: .env
    environment:
      GF_SERVER_DOMAIN: ${ANNOT_HOST}
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:%(http_port)s/${ANNOT_URL}/grafana"
      # GF_SERVER_SERVE_FROM_SUB_PATH: true

      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: ${GF_DATABASE_HOST}
      GF_DATABASE_NAME: ${GF_DATABASE_NAME}
      GF_DATABASE_USER: ${GF_DATABASE_USER}
      GF_DATABASE_PASSWORD: ${GF_DATABASE_PASSWORD}
      GF_DATABASE_SSL_MODE: disable
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD} 
    restart: unless-stopped
    depends_on:
        - pg_grafana
    volumes:
      - ./volumes/grafana_data:/var/lib/grafana
      - ./provisioning/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - anometras_net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 500M
    labels:
      - "traefik.anometras.env=${ANNOT_URL}"
      - "traefik.http.routers.grafana.rule=Host(`${ANNOT_HOST}`) && PathPrefix(`/${ANNOT_URL}/grafana`)"
      - "traefik.http.middlewares.annot-strip.stripprefix.prefixes=/${ANNOT_URL}/grafana"
      - "traefik.http.routers.grafana.middlewares=annot-strip"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  proxy:
    # The official v3 Traefik docker image
    image: traefik:v3.3
    container_name: proxy
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - --api.insecure=true
      - --providers.docker
      - --providers.docker.constraints=Label(`traefik.anometras.env`,`${ANNOT_URL}`)
#    networks:
#      - genesis_net
    ports:
      # The HTTP port
      - "8867:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8868:8080"
    environment:
      - TZ=Europe/Vilnius
    networks:
      - anometras_net
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 100M
      


  # whoami:
  #   # A container that exposes an API to show its IP address
  #   image: traefik/whoami
  #   command:
  #     - --port=2001
  #     - --name=iamwho
  #   networks:
  #     - anometras_net
  #   labels:
  #     - "traefik.anometras.env=${ANNOT_URL}"
  #     - "traefik.http.routers.whoami.rule=PathPrefix(`/${ANNOT_URL}/whoami`)"
  #     - "traefik.http.routers.whoami.middlewares=whoami"
  #     - "traefik.http.middlewares.whoami.stripprefix.prefixes=/${ANNOT_URL}/whoami/"
  #     - "traefik.http.services.whoami.loadbalancer.server.port=2001"

networks:
  anometras_net:
    # Specify driver options
    driver: bridge
    # driver_opts:
      # com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
