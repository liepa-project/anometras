services:



  anometras:
    container_name: anometras
    build:
      context: .
    env_file:
      - .env
    ports:
      - "8002:8000"    
    depends_on:
      pg_anometras:
        condition: service_healthy
        restart: true
    networks:
      - anometras_net




  pg_anometras:
    container_name: pg_anometras
    image: pgvector/pgvector:pg17 
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/pgvector/data:/var/lib/postgresql/data
      - ./provisioning/init_pgvector.sql:/docker-entrypoint-initdb.d/init_pgvector.sql
    environment:
      POSTGRES_USER: ${ANNOT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ANNOT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ANNOT_POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - anometras_net


  # pg_grafana:
  #   container_name: pg_grafana
  #   image: postgres:17
  #   restart: always
  #   environment:
  #     POSTGRES_DB: my_grafana_db
  #     POSTGRES_USER: my_grafana_user
  #     POSTGRES_PASSWORD: my_grafana_pwd
  #   ports:
  #     - "5499:5432"
  #   volumes:
  #     - ./volumes/pg_grafana:/var/lib/postgresql/data
  #   networks:
  #     - anometras_net

  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana:latest
  #   user: "0:0"
  #   environment:
  #     GF_DATABASE_TYPE: postgres
  #     GF_DATABASE_HOST: pg_grafana:5432
  #     GF_DATABASE_NAME: my_grafana_db
  #     GF_DATABASE_USER: my_grafana_user
  #     GF_DATABASE_PASSWORD: my_grafana_pwd
  #     GF_DATABASE_SSL_MODE: disable
  #   restart: unless-stopped
  #   depends_on:
  #       - pg_grafana
  #   ports:
  #     - 3111:3000
  #   volumes:
  #     - ./volumes/grafana_data:/var/lib/grafana
  #   networks:
  #     - anometras_net


networks:
  anometras_net:
    # Specify driver options
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"